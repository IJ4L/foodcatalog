// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertMenu = `-- name: InsertMenu :one
INSERT INTO
  menus (
    name,
    category,
    description,
    price,
    created_at,
    updated_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6) RETURNING id, name, category, description, price, image_url, created_at, updated_at
`

type InsertMenuParams struct {
	Name        pgtype.Text        `json:"name"`
	Category    pgtype.Text        `json:"category"`
	Description pgtype.Text        `json:"description"`
	Price       pgtype.Int4        `json:"price"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) InsertMenu(ctx context.Context, arg InsertMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, insertMenu,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectAllMenu = `-- name: SelectAllMenu :many
SELECT
  id,
  name,
  category,
  description,
  price,
  created_at,
  updated_at
FROM
  menus
`

type SelectAllMenuRow struct {
	ID          int32              `json:"id"`
	Name        pgtype.Text        `json:"name"`
	Category    pgtype.Text        `json:"category"`
	Description pgtype.Text        `json:"description"`
	Price       pgtype.Int4        `json:"price"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) SelectAllMenu(ctx context.Context) ([]SelectAllMenuRow, error) {
	rows, err := q.db.Query(ctx, selectAllMenu)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllMenuRow
	for rows.Next() {
		var i SelectAllMenuRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectMenuByID = `-- name: SelectMenuByID :one
SELECT
  id,
  name,
  category,
  description,
  price,
  created_at,
  updated_at
FROM
  menus
WHERE
  id = $1
`

type SelectMenuByIDRow struct {
	ID          int32              `json:"id"`
	Name        pgtype.Text        `json:"name"`
	Category    pgtype.Text        `json:"category"`
	Description pgtype.Text        `json:"description"`
	Price       pgtype.Int4        `json:"price"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) SelectMenuByID(ctx context.Context, id int32) (SelectMenuByIDRow, error) {
	row := q.db.QueryRow(ctx, selectMenuByID, id)
	var i SelectMenuByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
