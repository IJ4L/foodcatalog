// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertEmployee = `-- name: InsertEmployee :exec
INSERT INTO
  employees (name, address, nip, created_at, updated_at)
VALUES
  ($1, $2, $3, now(), now())
`

type InsertEmployeeParams struct {
	Name    pgtype.Text `json:"name"`
	Address pgtype.Text `json:"address"`
	Nip     pgtype.Text `json:"nip"`
}

func (q *Queries) InsertEmployee(ctx context.Context, arg InsertEmployeeParams) error {
	_, err := q.db.Exec(ctx, insertEmployee, arg.Name, arg.Address, arg.Nip)
	return err
}

const removeEmployeeByID = `-- name: RemoveEmployeeByID :exec
DELETE FROM
  employees
WHERE
  id = $1
`

func (q *Queries) RemoveEmployeeByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeEmployeeByID, id)
	return err
}

const selectAllEmployee = `-- name: SelectAllEmployee :many
SELECT
  id,
  name,
  address,
  nip,
  created_at
FROM
  employees
`

type SelectAllEmployeeRow struct {
	ID        int32              `json:"id"`
	Name      pgtype.Text        `json:"name"`
	Address   pgtype.Text        `json:"address"`
	Nip       pgtype.Text        `json:"nip"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) SelectAllEmployee(ctx context.Context) ([]SelectAllEmployeeRow, error) {
	rows, err := q.db.Query(ctx, selectAllEmployee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllEmployeeRow
	for rows.Next() {
		var i SelectAllEmployeeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Nip,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
