// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO
  auth (email, password)
VALUES
  ($1, $2) RETURNING id, email, created_at, updated_at
`

type InsertUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type InsertUserRow struct {
	ID        int32              `json:"id"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.Password)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT
  id,
  email,
  password,
  created_at,
  updated_at
FROM
  auth
WHERE
  email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
