package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/ij4l/foodCatalog/graph/model"
	"github.com/ij4l/foodCatalog/middleware"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	authID, err := middleware.GinFromContext(ctx)
	if err != nil {
		return nil, err
	}

	if *authID != 1 {
		err = fmt.Errorf("you are not authorized to create an employee")
		return nil, err
	}

	me, err := r.EmployeeHandler.CreateEmployee(input)
	if err != nil {
		return nil, err
	}

	return &me, nil
}

// RemoveEmployee is the resolver for the removeEmployee field.
func (r *mutationResolver) RemoveEmployee(ctx context.Context, id int) (bool, error) {
	authID, err := middleware.GinFromContext(ctx)
	if err != nil {
		return false, err
	}

	if *authID != 1 {
		err = fmt.Errorf("you are not authorized to create an employee")
		return false, err
	}

	if err := r.EmployeeHandler.RemoveEmployee(id); err != nil {
		return false, err
	}

	return true, nil
}

// ListEmployee is the resolver for the listEmployee field.
func (r *queryResolver) ListEmployee(ctx context.Context) ([]*model.Employee, error) {
	me, err := r.EmployeeHandler.ListEmployee()
	if err != nil {
		return nil, err
	}

	return me, nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id int) (*model.Employee, error) {
	em, err := r.EmployeeHandler.GetEmployeeByID(id)
	if err != nil {
		return nil, err
	}

	return &em, nil
}
