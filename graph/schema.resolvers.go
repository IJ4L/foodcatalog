package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/ij4l/foodCatalog/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	if err := r.AuthService.Create(input); err != nil {
		return nil, err
	}

	rsp := &model.User{
		ID:       1,
		Email:    input.Email,
		Password: input.Password,
	}

	return rsp, nil
}

// Login is the resolver for the Login field.
func (r *queryResolver) Login(ctx context.Context, email string) (*model.User, error) {
	user, err := r.AuthService.Login(email)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
